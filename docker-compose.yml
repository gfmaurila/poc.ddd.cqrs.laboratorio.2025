version: '3.4'

# docker-compose down
# docker-compose up -d --build
# docker-compose up --build
# Update-Database -Context MainContext 

networks:
  app-backend:
    driver: bridge

services:

  # Acesso ao gateway
  # http://localhost:5000/swagger/index.html
  api.gateway:
    image: ${DOCKER_REGISTRY-}apigateway
    restart: always
    build:
      context: .
      dockerfile: src/API/API.Gateway/Dockerfile
    networks:
      - app-backend
    depends_on:
      - api.auth
    links:
      - api.auth

  # Acesso ao auth
  # http://localhost:5001/swagger/index.html

  api.auth:
    image: ${DOCKER_REGISTRY-}apiauth
    restart: always
    build:
      context: .
      dockerfile: src/API/API.Auth/Dockerfile
    networks:
      - app-backend
    depends_on:
      - sqlserver
      - kafka1
      - redis
      - mongoserver

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    restart: always
    ports:
      - "1444:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Poc2Minimal@Api"
    networks:
      - app-backend
    volumes:
      - sql_data:/var/opt/mssql

  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass Poc2Minimal@Api
    restart: always
    expose:
      - 6379
    ports:
      - 6380:6379
    networks:
      - app-backend
    volumes:
      - redis_data:/var/opt/redis

  mongoserver:
    image: mongo:latest
    container_name: mongoserver
    restart: always
    expose:
      - 27017
    ports:
      - 27017:27017
    networks:
      - app-backend  
    volumes:
      - mongoserver_data:/var/opt/mongoserver

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    restart: always
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - app-backend  

  zookeeper:
    image: bitnami/zookeeper:3.8
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - app-backend

  kafka1:
    image: bitnami/kafka:3.6
    restart: always
    volumes:
      - kafka_data1:/bitnami
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - app-backend

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: always
    ports:
      - 9100:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka1
    networks:
      - app-backend

volumes:
  zookeeper_data:
    driver: local
  kafka_data1:
    driver: local
  sql_data:
    driver: local
  redis_data:
    driver: local
  mongoserver_data:
    driver: local
  .docker-conf:
    driver: local

